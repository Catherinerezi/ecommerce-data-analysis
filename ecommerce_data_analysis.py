# -*- coding: utf-8 -*-
"""ecommerce-data-analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-pTq6D350q5LmdVpiIF-zh1TIzRsv0kw"""

import streamlit as st
from scipy.stats import norm
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.preprocessing import MultiLabelBinarizer

st.sidebar.header("Data source")
up = st.sidebar.file_uploader("Upload CSV", type=["csv"])
use_repo = st.sidebar.checkbox("Use raw_data.csv from repo", value=not up)

@st.cache_data
def load_df(src):
    return pd.read_csv(src)

if up:
    df = load_df(up)
elif use_repo:
    df = load_df("raw_data.csv")
else:
    st.stop()

st.success(f"Loaded: {df.shape[0]} rows × {df.shape[1]} cols")
with st.expander("Sample"):
    st.dataframe(df.head())

df.head()

df.describe().T

df.shape

df.info()

df = df.drop(columns=['InvoiceNo', 'CustomerID'])

df.duplicated().sum()

df.isnull().sum()

missing_percentage = df.isnull().sum()/df.shape[0]*100
missing_percentage.sort_values(ascending=False)

df['TotalPrice'] = df['Quantity'] * df['UnitPrice']
df[['Quantity', 'UnitPrice', 'TotalPrice']].describe()

numeric_cols = df.select_dtypes(include=np.number).columns

for col in numeric_cols:
    Q1 = df[col].quantile(0.25)
    Q3 = df[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    outliers = df[(df[col] < lower_bound) | (df[col] > upper_bound)]
    outlier_count = len(outliers)
    outlier_percentage = (outlier_count / len(df)) * 100

suspect_rows = df[df.apply(lambda row: row.astype(str).str.contains("InvoiceNo|Description|Quantity", case=False).any(), axis=1)]

need = ["Description","Quantity","InvoiceDate","Country","UnitPrice"]
miss = [c for c in need if c not in df.columns]
if miss:
    st.error(f"Missing required columns: {miss}")
    st.stop()

df = df.drop(columns=[c for c in ["InvoiceNo","CustomerID"] if c in df.columns], errors="ignore")
df = df.dropna(subset=["Description","Quantity","InvoiceDate","Country"]).copy()
df["InvoiceDate"] = pd.to_datetime(df["InvoiceDate"], errors="coerce")
df = df.dropna(subset=["InvoiceDate"]).copy()
df["Month"] = df["InvoiceDate"].dt.to_period("M").astype(str)
df["TotalPrice"] = df["Quantity"] * df["UnitPrice"]
df_ready = df

"""#Q1. Produk apa yang paling sering dibeli dalam jumlah besar (Quantity > 10)?"""

df_before = df[["Description", "Quantity"]].head(10)

df_filtered = df[df["Quantity"] > 10]
df_after = df_filtered[["Description", "Quantity"]].head(10)

top_products = df_ready.groupby("Description")["Quantity"].sum().sort_values(ascending=False).head(10).reset_index()

st.header("Q1 — Top products by total quantity")
top_products = (df_ready.groupby("Description")["Quantity"]
                .sum().sort_values(ascending=False).head(10).reset_index())
st.dataframe(top_products)

fig, ax = plt.subplots()
sns.barplot(data=top_products, x="Quantity", y="Description", ax=ax)
ax.set_title("Top 10 Products (Quantity)")
st.pyplot(fig)

"""#Q2. Bagaimana tren pembelian per bulan selama tahun berjalan?"""

import matplotlib.dates as mdates

st.header("Q2 — Monthly trend")

# Pastikan kolom numerik benar2 numerik
df_ready["Quantity"]   = pd.to_numeric(df_ready["Quantity"], errors="coerce")
df_ready["UnitPrice"]  = pd.to_numeric(df_ready["UnitPrice"], errors="coerce")
df_ready["TotalPrice"] = df_ready["Quantity"] * df_ready["UnitPrice"]

# Pastikan kolom Month ada & berupa string YYYY-MM
if "Month" not in df_ready.columns:
    df_ready["InvoiceDate"] = pd.to_datetime(df_ready["InvoiceDate"], errors="coerce")
    df_ready = df_ready.dropna(subset=["InvoiceDate"])
    df_ready["Month"] = df_ready["InvoiceDate"].dt.to_period("M").astype(str)

# Grouping aman (tanpa concat string)
monthly = (
    df_ready
    .groupby("Month", as_index=False)
    .agg(Quantity=("Quantity", "sum"))
)

# Konversi tipe & urutkan waktu
monthly["Quantity"] = pd.to_numeric(monthly["Quantity"], errors="coerce").fillna(0).astype(float)
monthly["Month"] = pd.to_datetime(monthly["Month"], format="%Y-%m", errors="coerce")
monthly = monthly.dropna(subset=["Month"]).sort_values("Month")

# Plot
fig2, ax2 = plt.subplots()
sns.lineplot(data=monthly, x="Month", y="Quantity", marker="o", ax=ax2)
ax2.set_title("Monthly Quantity")
ax2.set_xlabel("Month")
ax2.set_ylabel("Total Quantity")
ax2.xaxis.set_major_formatter(mdates.DateFormatter("%Y-%m"))
fig2.autofmt_xdate()
st.pyplot(fig2)

"""#Q3. Negara mana yang memiliki volume pembelian terbesar?"""

df_before = df[["Country", "Quantity"]].head()

country_sales = df_ready.groupby("Country")["Quantity"].sum().sort_values(ascending=False).head(10).reset_index()

df_after = country_sales.head()

st.header("Q3 — Top countries")
countries = (df_ready.groupby("Country")["Quantity"]
             .sum().sort_values(ascending=False).head(10).reset_index())
st.dataframe(countries)
fig3, ax3 = plt.subplots()
sns.barplot(data=countries, x="Quantity", y="Country", ax=ax3)
ax3.set_title("Top 10 Countries")
st.pyplot(fig3)

"""#Q4. Produk apa yang paling sering dibeli oleh masing-masing negara?"""

df_clean = df.dropna(subset=["Country", "Description", "Quantity"])

country_product =  df_ready.groupby(["Country", "Description"])["Quantity"].sum().reset_index()

top_product_per_country = country_product.loc[country_product.groupby("Country")["Quantity"].idxmax()].sort_values(by="Quantity", ascending=False)

st.header("Q4 — Most popular product per country")
cp = (df_ready.groupby(["Country","Description"])["Quantity"].sum().reset_index())
top_per_country = cp.loc[cp.groupby("Country")["Quantity"].idxmax()].sort_values("Quantity", ascending=False)
st.dataframe(top_per_country.head(10))
fig4, ax4 = plt.subplots()
sns.barplot(data=top_per_country.head(10), x="Quantity", y="Country",
            hue="Description", dodge=False, ax=ax4)
ax4.set_title("Top Product per Country (Top 10)")
ax4.legend(bbox_to_anchor=(1.02,1), loc="upper left")
st.pyplot(fig4)

"""#Q5. Produk apa yang paling banyak dibeli dalam jumlah besar (Quantity > 100)?"""

st.header("Q5. Produk dengan pembelian jumlah besar")

df_ready["Quantity"] = pd.to_numeric(df_ready["Quantity"], errors="coerce")

qty_threshold = st.sidebar.number_input("Minimum Quantity (bulk)", 1, 1000, 100, 1)
top_n = st.sidebar.slider("Top N", 5, 30, 10)

bulk_orders = df_ready[df_ready["Quantity"] > qty_threshold]
bulk_top_products = (
    bulk_orders.groupby("Description", as_index=False)["Quantity"].sum()
    .sort_values("Quantity", ascending=False)
    .head(top_n)
)

if bulk_top_products.empty:
    st.warning("Tidak ada transaksi di atas threshold yang dipilih.")
else:
    st.dataframe(bulk_top_products)

    fig5, ax5 = plt.subplots(figsize=(8, 4))
    sns.barplot(data=bulk_top_products, x="Quantity", y="Description", ax=ax5)
    ax5.set_title(f"Top {top_n} Produk dengan Pembelian Jumbo (Quantity > {qty_threshold})")
    ax5.set_xlabel("Total Quantity")
    ax5.set_ylabel("Produk")
    fig5.tight_layout()
    st.pyplot(fig5)



"""#Analisis multivariate pada kolom numerikal"""

numerical_df = df.select_dtypes(include=['float64', 'int64'])

correlation_matrix = numerical_df.corr()

st.header("Correlation heatmap")
num = df_ready.select_dtypes(include=["float64","int64"])
corr = num.corr(numeric_only=True)
fig6, ax5 = plt.subplots()
sns.heatmap(corr, annot=True, fmt=".2f", cmap="coolwarm", ax=ax5)
ax6.set_title("Correlation (numeric)")
st.pyplot(fig6)
